from math import sqrt
def Liste_facteures(old_P, old_facteures, pold, pnext):
    old_facteures.extend(range(pold, pnext))
    return old_facteures, old_P * pold
def Liste_restes(old_restes, old_P, old_facteures, PBIS, x):
    pold = PBIS[x]
    pnext = PBIS[x + 1] if x + 1 < len(PBIS) else 7
    facteures, P = Liste_facteures(old_P, old_facteures, pold, pnext)
    restes = [1] + [P * f + r for f in facteures for r in old_restes]
    x += 1
    PBIS.extend(old_restes[1:])    
    return restes, P, facteures, PBIS, x
def filtrage(restes, PBIS, x):
    pold = PBIS[x]
    return [1] + [r for r in restes[1:] if r != pold and r % pold != 0]
PBIS = [2, 3]
x = 1
restes, P, facteures, PBIS, x = Liste_restes([1, 5], 2, [1, 2], PBIS, x)
number=3
for _ in range(number):
    restes = filtrage(restes, PBIS, x)
    restes, P, facteures, PBIS, x = Liste_restes(restes, P, facteures, PBIS, x)
divmax = int(sqrt(PBIS[-1]))
for xc in range(x,len(PBIS)):
    PBIS = filtrage(PBIS, PBIS, xc)
    if PBIS[xc] > divmax:
        break
Premiers = [2] + PBIS[1:]
print(Premiers)